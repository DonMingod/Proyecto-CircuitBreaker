package com.huisa.service;


import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.ratelimiter.annotation.RateLimiter;
import io.github.resilience4j.retry.annotation.Retry;


@Service
public class ExternalService {
	
	private final RestTemplate restTemplate;
	

	public ExternalService(RestTemplateBuilder restTemplateBuilder) {
		this.restTemplate = restTemplateBuilder.build();
	}
	
	
	@CircuitBreaker (name= "miCircuitBreaker" , fallbackMethod = "fallbackMethod")
	@Retry(name= "miCircuitBreaker")
	@RateLimiter(name= "miCircuitBreaker")
	public String callExternalService() {
		
			String url = "http://localhost:8081";	
			ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
		  			
		     return response.getBody();    		
	}
	
	//public String fallbackMethod(Throwable t) {
	   // System.out.println("ENTRO EL FALLBACKMETHOD");
	 //   return "Fallback response due to:" + t.getMessage();
	//}
	
	 public String fallbackMethod(Exception ex) {
	        System.out.println("ENTRO EL FALLBACKMETHOD");
	        return "Servicio externo no disponible. Motivo: " + ex.getMessage();
	    }

}
